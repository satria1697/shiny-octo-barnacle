// @generated by protobuf-ts 2.8.0 with parameter output_javascript
// @generated from protobuf file "hehe.proto" (package "hehepb", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { asd } from "./test.js";
// @generated message type with reflection information, may provide speed optimized methods
class mine$Type extends MessageType {
    constructor() {
        super("hehepb.mine", [
            { no: 1, name: "detail", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "asd", kind: "message", oneof: "details", T: () => asd }
        ]);
    }
    create(value) {
        const message = { detail: "", details: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string detail */ 1:
                    message.detail = reader.string();
                    break;
                case /* testpb.asd asd */ 2:
                    message.details = {
                        oneofKind: "asd",
                        asd: asd.internalBinaryRead(reader, reader.uint32(), options, message.details.asd)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string detail = 1; */
        if (message.detail !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.detail);
        /* testpb.asd asd = 2; */
        if (message.details.oneofKind === "asd")
            asd.internalBinaryWrite(message.details.asd, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hehepb.mine
 */
export const mine = new mine$Type();
